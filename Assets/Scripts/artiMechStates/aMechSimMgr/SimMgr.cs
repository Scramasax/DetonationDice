/// Artimech
/// 
/// Copyright Â© <2017> <George A Lancaster>
/// Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
/// and associated documentation files (the "Software"), to deal in the Software without restriction, 
/// including without limitation the rights to use, copy, modify, merge, publish, distribute, 
/// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
/// is furnished to do so, subject to the following conditions:
/// The above copyright notice and this permission notice shall be included in all copies 
/// or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
/// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
/// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
/// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
/// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
/// OTHER DEALINGS IN THE SOFTWARE.

using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace Artimech
{
    public class SimMgr : stateMachineBase
    {
        private static SimMgr m_Instance = null;

        /// <summary>Returns an instance of SimMgr </summary>
        public static SimMgr Inst { get { return m_Instance; } }



        private IList<aMechSpawnPoint> m_SpawnPointList;

        public IList<aMechSpawnPoint> SpawnPointList
        {
            get
            {
                return m_SpawnPointList;
            }

            set
            {
                m_SpawnPointList = value;
            }
        }
        new void Awake()
        {
            if (m_Instance != null)
            {
                Debug.LogWarning("There was already an instance of SimMgr.");
                return;
            }

            base.Awake();
            CreateStates();

            m_SpawnPointList = new List<aMechSpawnPoint>();

            m_Instance = GetComponent<SimMgr>();
        }

        // Use this for initialization
        new void Start()
        {
            base.Start();
        }

        // Update is called once per frame
        new void Update()
        {
            base.Update();
        }

        new void FixedUpdate()
        {
            base.FixedUpdate();
        }

        /// <summary>
        /// Autogenerated state are created here inside this function.
        /// </summary>
        void CreateStates()
        {

            m_CurrentState = AddState(new simMgrStart(this.gameObject), "simMgrStart");

            //<ArtiMechStates>
            AddState(new simMgrStartGame(this.gameObject), "simMgrStartGame");
            AddState(new simMgrGameOverEnd(this.gameObject), "simMgrGameOverEnd");
            AddState(new simMgrGameOverStart(this.gameObject), "simMgrGameOverStart");
            AddState(new simMgrUpdate(this.gameObject), "simMgrUpdate");

        }
    }
}